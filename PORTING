
Porting Notes
-------------

Combat is still a somewhat moving target. Sometimes, backward-incompatible
changes are introduced, so that scripts must be edited to run under a new
version of Combat.

This document only describes the changes that must be made to old code when
switching from one Combat version to another. It does not mention newly
introduced commands.

Versions before 0.6 were named TclMico and did only run on various versions
of the MICO ORB.


Version 0.6 to 0.7
------------------
- There should be no backwards-incompatible changes, all code should run
  as before.
- The "icombatsh" shell is no longer built; this was a tclsh that included
  both combat and [incr Tcl]. Instead of running icombatsh, please run the
  plain combatsh, and then do `package require Itcl'.


Version 0.5 to 0.6
------------------

- The server-side mapping has changed to be dynamic instead of static.
  Skeletons are not needed any more and aren't generated by idl2tcl any
  more. Imlementation classes now have to inherit directly or indirectly
  from ::PortableServer::ServantBase.
  Because there is no skeleton holding static type information, this means
  that servants must provide type information themselves. Therefore, a
  servant must implement the public method _Interface (leading underscore,
  capital I) with no parameters. This method must return the most-derived
  Repository Id as string.
  Example:

  // IDL

  interface foo {
    void bar ();
  };

  // Old TclMico 0.5 servant

  class foo_impl {
    inherit POA_foo
    public method bar {} {...}
  }

  // New Combat 0.6 servant

  class foo_impl {
    inherit ::PortableServer::ServantBase
    public method _Interface {} {
      return "IDL:foo:1.0"
    }
    public method bar {} {...}
  }

- The server-side mapping for attributes has changed, they are now mapped
  to [incr Tcl] public variables.
  Example:

  // IDL (within an Interface declaration)

    attribute short foo;
    readonly attribute string hello;

  // Old TclMico 0.5 servant (within a servant class implementation)

    public method _get_foo {} {...}
    public method _set_foo {newvalue} {...}
    public method _get_hello {} {...}

  // New Combat 0.6 servant (within a servant class implementation)

    public variable foo
    public variable hello

  Note that you can supply a "config script" to a variable that intercepts
  modification of a variable, so that you can still react upon setting an
  attribute.

- inout and out parameters do not use class-level variables any more, as
  this led to problems with recursive method invocations. Instead, the
  "official" means for pass-by-reference values is used, i.e. to import
  variables using upvar.
  Example:

  // IDL (within an Interface declaration)

    void strcpy (out string target, in string source);

  // Old TclMico 0.5 servant (within a servant class implementation)

    public method strcpy {target source} {
      set $target $source
    }

  // New Combat 0.6 servant (within a servant class implementation)

    public method strcpy {target_var source} {
      upvar $target_var target
      set target $source
    }

- When not built to use MICO but another ORB, `mico::bind' is, consequently,
  not supported.

- `mico::ir' is still supported, even when built upon other ORBs, but has
  been renamed to combat::ir, because it is not really MICO-specific, but
  rather Combat-specific.

- Support for the "dump", "describe", and "destroy" subcommands of `mico::ir'
  has been dropped. (mico::ir add still works the same as combat::ir add.)
  Use the real IR interface instead. The main rationale for `mico::ir dump'
  was idl2tcl, which has been rewritten in plain Tcl. (Have a look at idl2tcl,
  it nicely demonstrates the lack of `typecasting' (à la _narrow), the ease
  of object reference handling and exploiting covariance, all not possible
  in C++.)

- `corba::request wait' cannot be used any more on handles associated with
  callbacks, i.e. `while {[corba::request wait] != ""} { update }' is not a
  correct idiom to wait for unfinished callbacks any more.

- Interface information for active objects is now cached locally, i.e. modi-
  fications of an interface in the Interface Repository will only be reloaded
  if all existing handles of that type are released.

- Re-introduced a special mapping for octet sequences, octet arrays,
  character sequences and character arrays to Tcl strings for efficiency
  reasons.

- The TypeCode mapping for struct, union, exception and recursive TypeCodes
  has changed. See the doc for details.


Version 0.4 to 0.5
------------------

Many changes as part of  the effort to achieve a Tcl mapping that could be
used as an OMG submission. Still a work in progress.


- Object references are now directly mapped to handles. Previously, object
  references were mapped to strings, which had then to be "narrowed" to a
  handle. For example:

  Old:
       set Account_ref [$Bank create]
       set Account [Account::_narrow $Account_ref]

  New:
       set Account [$Bank create]

  The type-specific _narrow, _duplicate and _nil methods have been re-
  moved.

- Handles are released automatically when the variable that contains them
  goes out of scope, or is unset explicitly. The command mico::release is
  not needed any more and has been removed.

- The _get_interface method now returns a handle to an InterfaceDef rather
  than the IR description for mico::ir.

- The commands mico::ORB_init and mico::ORB_instance have been removed.
  Use corba::init instead.

- The ORB pseudo object has been removed. Its interface is now available
  through the following commands:

    corba::string_to_object <string>
    corba::object_to_string <handle>
    corba::list_initial_services
    corba::resolve_initial_references <id>

- The following commands have been moved from the mico:: to the corba::
  namespace as part of the standardization process:

    old:   mico::init  <ORB-parameters> <arbitrary parameters>
    new:   corba::init <ORB-parameters> <arbitrary parameters>

    old:   mico::throw <exception-repo-id> <exception-contents>
    new:   corba::throw <exception>
           (the mapping for exceptions has changed)

    old:   mico::request <...>
    new:   corba::request <...>

- The typecode-specific subcommands of the old mico::ir command are now
  available as part of the corba::type interface:

    old:   mico::ir type <repoid>
    new:   corba::type of <repoid-or-scoped-name>

    old:   mico::ir equal <repoid> <typecode>
    new:   corba::type equivalent <typecode> <typecode>

    old:   mico::ir match <typecode> <value>
    new:   corba::type match <typecode> <value>

  The syntax of the other mico::ir subcommands has partially changed,
  but they remain in the mico:: namespace.

- The special case of mapping sequences and arrays of char or octet as
  Tcl strings has been removed. Sequences and arrays of char or octet
  are now mapped like any other type, as lists of the individual
  characters.

